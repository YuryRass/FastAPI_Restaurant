version: "3.8"
services:
  test_db:
    image: postgres:15.1-alpine
    container_name: test_postgres
    env_file:
      - .env_test
    environment:
      - POSTGRES_USER=${TEST_DB_USER}
      - POSTGRES_PASSWORD=${TEST_DB_PASS}
      - POSTGRES_DB=${TEST_DB_NAME}
    ports:
      - 4321:5432
    volumes:
      - psql_pytest_network:/var/lib/postgresql/data/
    networks:
      - my_network_pytest
    healthcheck:
      test: pg_isready -U ${TEST_DB_USER} -d ${TEST_DB_NAME}
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

  test_restaurant_app:
    image: test_restaurant_app
    build:
      context: .
    container_name: test_rest_app
    env_file:
      - .env_test
    depends_on:
      test_db:
        condition: service_healthy
    ports:
      - 9000:8000
    networks:
      - my_network_pytest

  redis:
    image: redis:latest
    container_name: test_redis
    networks:
      - my_network_pytest
    volumes:
      - test_redis_data:/data
    expose:
      - 6379
    ports:
      - 5555:6379
    env_file:
      - .env_test
    healthcheck:
      test: redis-cli ping | grep PONG
      interval: 1s
      timeout: 3s
      retries: 5

networks:
  my_network_pytest:
    name: my_network_pytest
volumes:
  psql_pytest_network:
    name: psql_pytest_network
  test_redis_data:
    name: test_redis_data
